// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PathUtilsMock is an autogenerated mock type for the pathUtils type
type PathUtilsMock struct {
	mock.Mock
}

type PathUtilsMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PathUtilsMock) EXPECT() *PathUtilsMock_Expecter {
	return &PathUtilsMock_Expecter{mock: &_m.Mock}
}

// ComposeBasePath provides a mock function with given fields: relativePath
func (_m *PathUtilsMock) ComposeBasePath(relativePath string) string {
	ret := _m.Called(relativePath)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(relativePath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PathUtilsMock_ComposeBasePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComposeBasePath'
type PathUtilsMock_ComposeBasePath_Call struct {
	*mock.Call
}

// ComposeBasePath is a helper method to define mock.On call
//   - relativePath string
func (_e *PathUtilsMock_Expecter) ComposeBasePath(relativePath interface{}) *PathUtilsMock_ComposeBasePath_Call {
	return &PathUtilsMock_ComposeBasePath_Call{Call: _e.mock.On("ComposeBasePath", relativePath)}
}

func (_c *PathUtilsMock_ComposeBasePath_Call) Run(run func(relativePath string)) *PathUtilsMock_ComposeBasePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PathUtilsMock_ComposeBasePath_Call) Return(_a0 string) *PathUtilsMock_ComposeBasePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PathUtilsMock_ComposeBasePath_Call) RunAndReturn(run func(string) string) *PathUtilsMock_ComposeBasePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetBasePath provides a mock function with given fields:
func (_m *PathUtilsMock) GetBasePath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PathUtilsMock_GetBasePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBasePath'
type PathUtilsMock_GetBasePath_Call struct {
	*mock.Call
}

// GetBasePath is a helper method to define mock.On call
func (_e *PathUtilsMock_Expecter) GetBasePath() *PathUtilsMock_GetBasePath_Call {
	return &PathUtilsMock_GetBasePath_Call{Call: _e.mock.On("GetBasePath")}
}

func (_c *PathUtilsMock_GetBasePath_Call) Run(run func()) *PathUtilsMock_GetBasePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PathUtilsMock_GetBasePath_Call) Return(_a0 string) *PathUtilsMock_GetBasePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PathUtilsMock_GetBasePath_Call) RunAndReturn(run func() string) *PathUtilsMock_GetBasePath_Call {
	_c.Call.Return(run)
	return _c
}

// NewPathUtilsMock creates a new instance of PathUtilsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPathUtilsMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PathUtilsMock {
	mock := &PathUtilsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
