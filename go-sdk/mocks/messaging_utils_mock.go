// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MessagingUtilsMock is an autogenerated mock type for the messagingUtils type
type MessagingUtilsMock struct {
	mock.Mock
}

type MessagingUtilsMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MessagingUtilsMock) EXPECT() *MessagingUtilsMock_Expecter {
	return &MessagingUtilsMock_Expecter{mock: &_m.Mock}
}

// GetMaxMessageSize provides a mock function with given fields:
func (_m *MessagingUtilsMock) GetMaxMessageSize() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagingUtilsMock_GetMaxMessageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxMessageSize'
type MessagingUtilsMock_GetMaxMessageSize_Call struct {
	*mock.Call
}

// GetMaxMessageSize is a helper method to define mock.On call
func (_e *MessagingUtilsMock_Expecter) GetMaxMessageSize() *MessagingUtilsMock_GetMaxMessageSize_Call {
	return &MessagingUtilsMock_GetMaxMessageSize_Call{Call: _e.mock.On("GetMaxMessageSize")}
}

func (_c *MessagingUtilsMock_GetMaxMessageSize_Call) Run(run func()) *MessagingUtilsMock_GetMaxMessageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessagingUtilsMock_GetMaxMessageSize_Call) Return(_a0 int64, _a1 error) *MessagingUtilsMock_GetMaxMessageSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessagingUtilsMock_GetMaxMessageSize_Call) RunAndReturn(run func() (int64, error)) *MessagingUtilsMock_GetMaxMessageSize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessagingUtilsMock creates a new instance of MessagingUtilsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagingUtilsMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagingUtilsMock {
	mock := &MessagingUtilsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
