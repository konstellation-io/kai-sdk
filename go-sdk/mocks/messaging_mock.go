// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	anypb "google.golang.org/protobuf/types/known/anypb"

	nats "github.com/nats-io/nats.go"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MessagingMock is an autogenerated mock type for the messaging type
type MessagingMock struct {
	mock.Mock
}

type MessagingMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MessagingMock) EXPECT() *MessagingMock_Expecter {
	return &MessagingMock_Expecter{mock: &_m.Mock}
}

// GetErrorMessage provides a mock function with given fields:
func (_m *MessagingMock) GetErrorMessage() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MessagingMock_GetErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetErrorMessage'
type MessagingMock_GetErrorMessage_Call struct {
	*mock.Call
}

// GetErrorMessage is a helper method to define mock.On call
func (_e *MessagingMock_Expecter) GetErrorMessage() *MessagingMock_GetErrorMessage_Call {
	return &MessagingMock_GetErrorMessage_Call{Call: _e.mock.On("GetErrorMessage")}
}

func (_c *MessagingMock_GetErrorMessage_Call) Run(run func()) *MessagingMock_GetErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessagingMock_GetErrorMessage_Call) Return(_a0 string) *MessagingMock_GetErrorMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagingMock_GetErrorMessage_Call) RunAndReturn(run func() string) *MessagingMock_GetErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetRequestID provides a mock function with given fields: msg
func (_m *MessagingMock) GetRequestID(msg *nats.Msg) (string, error) {
	ret := _m.Called(msg)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*nats.Msg) (string, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func(*nats.Msg) string); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*nats.Msg) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagingMock_GetRequestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRequestID'
type MessagingMock_GetRequestID_Call struct {
	*mock.Call
}

// GetRequestID is a helper method to define mock.On call
//   - msg *nats.Msg
func (_e *MessagingMock_Expecter) GetRequestID(msg interface{}) *MessagingMock_GetRequestID_Call {
	return &MessagingMock_GetRequestID_Call{Call: _e.mock.On("GetRequestID", msg)}
}

func (_c *MessagingMock_GetRequestID_Call) Run(run func(msg *nats.Msg)) *MessagingMock_GetRequestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*nats.Msg))
	})
	return _c
}

func (_c *MessagingMock_GetRequestID_Call) Return(_a0 string, _a1 error) *MessagingMock_GetRequestID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessagingMock_GetRequestID_Call) RunAndReturn(run func(*nats.Msg) (string, error)) *MessagingMock_GetRequestID_Call {
	_c.Call.Return(run)
	return _c
}

// IsMessageError provides a mock function with given fields:
func (_m *MessagingMock) IsMessageError() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MessagingMock_IsMessageError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMessageError'
type MessagingMock_IsMessageError_Call struct {
	*mock.Call
}

// IsMessageError is a helper method to define mock.On call
func (_e *MessagingMock_Expecter) IsMessageError() *MessagingMock_IsMessageError_Call {
	return &MessagingMock_IsMessageError_Call{Call: _e.mock.On("IsMessageError")}
}

func (_c *MessagingMock_IsMessageError_Call) Run(run func()) *MessagingMock_IsMessageError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessagingMock_IsMessageError_Call) Return(_a0 bool) *MessagingMock_IsMessageError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagingMock_IsMessageError_Call) RunAndReturn(run func() bool) *MessagingMock_IsMessageError_Call {
	_c.Call.Return(run)
	return _c
}

// IsMessageOK provides a mock function with given fields:
func (_m *MessagingMock) IsMessageOK() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MessagingMock_IsMessageOK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMessageOK'
type MessagingMock_IsMessageOK_Call struct {
	*mock.Call
}

// IsMessageOK is a helper method to define mock.On call
func (_e *MessagingMock_Expecter) IsMessageOK() *MessagingMock_IsMessageOK_Call {
	return &MessagingMock_IsMessageOK_Call{Call: _e.mock.On("IsMessageOK")}
}

func (_c *MessagingMock_IsMessageOK_Call) Run(run func()) *MessagingMock_IsMessageOK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessagingMock_IsMessageOK_Call) Return(_a0 bool) *MessagingMock_IsMessageOK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagingMock_IsMessageOK_Call) RunAndReturn(run func() bool) *MessagingMock_IsMessageOK_Call {
	_c.Call.Return(run)
	return _c
}

// SendAny provides a mock function with given fields: response, channelOpt
func (_m *MessagingMock) SendAny(response *anypb.Any, channelOpt ...string) {
	_va := make([]interface{}, len(channelOpt))
	for _i := range channelOpt {
		_va[_i] = channelOpt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, response)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MessagingMock_SendAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAny'
type MessagingMock_SendAny_Call struct {
	*mock.Call
}

// SendAny is a helper method to define mock.On call
//   - response *anypb.Any
//   - channelOpt ...string
func (_e *MessagingMock_Expecter) SendAny(response interface{}, channelOpt ...interface{}) *MessagingMock_SendAny_Call {
	return &MessagingMock_SendAny_Call{Call: _e.mock.On("SendAny",
		append([]interface{}{response}, channelOpt...)...)}
}

func (_c *MessagingMock_SendAny_Call) Run(run func(response *anypb.Any, channelOpt ...string)) *MessagingMock_SendAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(*anypb.Any), variadicArgs...)
	})
	return _c
}

func (_c *MessagingMock_SendAny_Call) Return() *MessagingMock_SendAny_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessagingMock_SendAny_Call) RunAndReturn(run func(*anypb.Any, ...string)) *MessagingMock_SendAny_Call {
	_c.Call.Return(run)
	return _c
}

// SendAnyWithRequestID provides a mock function with given fields: response, requestID, channelOpt
func (_m *MessagingMock) SendAnyWithRequestID(response *anypb.Any, requestID string, channelOpt ...string) {
	_va := make([]interface{}, len(channelOpt))
	for _i := range channelOpt {
		_va[_i] = channelOpt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, response, requestID)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MessagingMock_SendAnyWithRequestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAnyWithRequestID'
type MessagingMock_SendAnyWithRequestID_Call struct {
	*mock.Call
}

// SendAnyWithRequestID is a helper method to define mock.On call
//   - response *anypb.Any
//   - requestID string
//   - channelOpt ...string
func (_e *MessagingMock_Expecter) SendAnyWithRequestID(response interface{}, requestID interface{}, channelOpt ...interface{}) *MessagingMock_SendAnyWithRequestID_Call {
	return &MessagingMock_SendAnyWithRequestID_Call{Call: _e.mock.On("SendAnyWithRequestID",
		append([]interface{}{response, requestID}, channelOpt...)...)}
}

func (_c *MessagingMock_SendAnyWithRequestID_Call) Run(run func(response *anypb.Any, requestID string, channelOpt ...string)) *MessagingMock_SendAnyWithRequestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(*anypb.Any), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MessagingMock_SendAnyWithRequestID_Call) Return() *MessagingMock_SendAnyWithRequestID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessagingMock_SendAnyWithRequestID_Call) RunAndReturn(run func(*anypb.Any, string, ...string)) *MessagingMock_SendAnyWithRequestID_Call {
	_c.Call.Return(run)
	return _c
}

// SendError provides a mock function with given fields: errorMessage
func (_m *MessagingMock) SendError(errorMessage string) {
	_m.Called(errorMessage)
}

// MessagingMock_SendError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendError'
type MessagingMock_SendError_Call struct {
	*mock.Call
}

// SendError is a helper method to define mock.On call
//   - errorMessage string
func (_e *MessagingMock_Expecter) SendError(errorMessage interface{}) *MessagingMock_SendError_Call {
	return &MessagingMock_SendError_Call{Call: _e.mock.On("SendError", errorMessage)}
}

func (_c *MessagingMock_SendError_Call) Run(run func(errorMessage string)) *MessagingMock_SendError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MessagingMock_SendError_Call) Return() *MessagingMock_SendError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessagingMock_SendError_Call) RunAndReturn(run func(string)) *MessagingMock_SendError_Call {
	_c.Call.Return(run)
	return _c
}

// SendOutput provides a mock function with given fields: response, channelOpt
func (_m *MessagingMock) SendOutput(response protoreflect.ProtoMessage, channelOpt ...string) error {
	_va := make([]interface{}, len(channelOpt))
	for _i := range channelOpt {
		_va[_i] = channelOpt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, response)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(protoreflect.ProtoMessage, ...string) error); ok {
		r0 = rf(response, channelOpt...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagingMock_SendOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOutput'
type MessagingMock_SendOutput_Call struct {
	*mock.Call
}

// SendOutput is a helper method to define mock.On call
//   - response protoreflect.ProtoMessage
//   - channelOpt ...string
func (_e *MessagingMock_Expecter) SendOutput(response interface{}, channelOpt ...interface{}) *MessagingMock_SendOutput_Call {
	return &MessagingMock_SendOutput_Call{Call: _e.mock.On("SendOutput",
		append([]interface{}{response}, channelOpt...)...)}
}

func (_c *MessagingMock_SendOutput_Call) Run(run func(response protoreflect.ProtoMessage, channelOpt ...string)) *MessagingMock_SendOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(protoreflect.ProtoMessage), variadicArgs...)
	})
	return _c
}

func (_c *MessagingMock_SendOutput_Call) Return(_a0 error) *MessagingMock_SendOutput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagingMock_SendOutput_Call) RunAndReturn(run func(protoreflect.ProtoMessage, ...string) error) *MessagingMock_SendOutput_Call {
	_c.Call.Return(run)
	return _c
}

// SendOutputWithRequestID provides a mock function with given fields: response, requestID, channelOpt
func (_m *MessagingMock) SendOutputWithRequestID(response protoreflect.ProtoMessage, requestID string, channelOpt ...string) error {
	_va := make([]interface{}, len(channelOpt))
	for _i := range channelOpt {
		_va[_i] = channelOpt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, response, requestID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(protoreflect.ProtoMessage, string, ...string) error); ok {
		r0 = rf(response, requestID, channelOpt...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagingMock_SendOutputWithRequestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOutputWithRequestID'
type MessagingMock_SendOutputWithRequestID_Call struct {
	*mock.Call
}

// SendOutputWithRequestID is a helper method to define mock.On call
//   - response protoreflect.ProtoMessage
//   - requestID string
//   - channelOpt ...string
func (_e *MessagingMock_Expecter) SendOutputWithRequestID(response interface{}, requestID interface{}, channelOpt ...interface{}) *MessagingMock_SendOutputWithRequestID_Call {
	return &MessagingMock_SendOutputWithRequestID_Call{Call: _e.mock.On("SendOutputWithRequestID",
		append([]interface{}{response, requestID}, channelOpt...)...)}
}

func (_c *MessagingMock_SendOutputWithRequestID_Call) Run(run func(response protoreflect.ProtoMessage, requestID string, channelOpt ...string)) *MessagingMock_SendOutputWithRequestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(protoreflect.ProtoMessage), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MessagingMock_SendOutputWithRequestID_Call) Return(_a0 error) *MessagingMock_SendOutputWithRequestID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagingMock_SendOutputWithRequestID_Call) RunAndReturn(run func(protoreflect.ProtoMessage, string, ...string) error) *MessagingMock_SendOutputWithRequestID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessagingMock creates a new instance of MessagingMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagingMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagingMock {
	mock := &MessagingMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
