// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EphemeralStorageMock is an autogenerated mock type for the ephemeralStorage type
type EphemeralStorageMock struct {
	mock.Mock
}

type EphemeralStorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EphemeralStorageMock) EXPECT() *EphemeralStorageMock_Expecter {
	return &EphemeralStorageMock_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key
func (_m *EphemeralStorageMock) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EphemeralStorageMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type EphemeralStorageMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *EphemeralStorageMock_Expecter) Delete(key interface{}) *EphemeralStorageMock_Delete_Call {
	return &EphemeralStorageMock_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *EphemeralStorageMock_Delete_Call) Run(run func(key string)) *EphemeralStorageMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EphemeralStorageMock_Delete_Call) Return(_a0 error) *EphemeralStorageMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EphemeralStorageMock_Delete_Call) RunAndReturn(run func(string) error) *EphemeralStorageMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *EphemeralStorageMock) Get(key string) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EphemeralStorageMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type EphemeralStorageMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *EphemeralStorageMock_Expecter) Get(key interface{}) *EphemeralStorageMock_Get_Call {
	return &EphemeralStorageMock_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *EphemeralStorageMock_Get_Call) Run(run func(key string)) *EphemeralStorageMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EphemeralStorageMock_Get_Call) Return(_a0 []byte, _a1 error) *EphemeralStorageMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EphemeralStorageMock_Get_Call) RunAndReturn(run func(string) ([]byte, error)) *EphemeralStorageMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: regexp
func (_m *EphemeralStorageMock) List(regexp ...string) ([]string, error) {
	_va := make([]interface{}, len(regexp))
	for _i := range regexp {
		_va[_i] = regexp[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]string, error)); ok {
		return rf(regexp...)
	}
	if rf, ok := ret.Get(0).(func(...string) []string); ok {
		r0 = rf(regexp...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(regexp...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EphemeralStorageMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type EphemeralStorageMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - regexp ...string
func (_e *EphemeralStorageMock_Expecter) List(regexp ...interface{}) *EphemeralStorageMock_List_Call {
	return &EphemeralStorageMock_List_Call{Call: _e.mock.On("List",
		append([]interface{}{}, regexp...)...)}
}

func (_c *EphemeralStorageMock_List_Call) Run(run func(regexp ...string)) *EphemeralStorageMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *EphemeralStorageMock_List_Call) Return(_a0 []string, _a1 error) *EphemeralStorageMock_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EphemeralStorageMock_List_Call) RunAndReturn(run func(...string) ([]string, error)) *EphemeralStorageMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// Purge provides a mock function with given fields: regexp
func (_m *EphemeralStorageMock) Purge(regexp ...string) error {
	_va := make([]interface{}, len(regexp))
	for _i := range regexp {
		_va[_i] = regexp[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(regexp...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EphemeralStorageMock_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type EphemeralStorageMock_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - regexp ...string
func (_e *EphemeralStorageMock_Expecter) Purge(regexp ...interface{}) *EphemeralStorageMock_Purge_Call {
	return &EphemeralStorageMock_Purge_Call{Call: _e.mock.On("Purge",
		append([]interface{}{}, regexp...)...)}
}

func (_c *EphemeralStorageMock_Purge_Call) Run(run func(regexp ...string)) *EphemeralStorageMock_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *EphemeralStorageMock_Purge_Call) Return(_a0 error) *EphemeralStorageMock_Purge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EphemeralStorageMock_Purge_Call) RunAndReturn(run func(...string) error) *EphemeralStorageMock_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: key, value, overwrite
func (_m *EphemeralStorageMock) Save(key string, value []byte, overwrite ...bool) error {
	_va := make([]interface{}, len(overwrite))
	for _i := range overwrite {
		_va[_i] = overwrite[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, ...bool) error); ok {
		r0 = rf(key, value, overwrite...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EphemeralStorageMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type EphemeralStorageMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - overwrite ...bool
func (_e *EphemeralStorageMock_Expecter) Save(key interface{}, value interface{}, overwrite ...interface{}) *EphemeralStorageMock_Save_Call {
	return &EphemeralStorageMock_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{key, value}, overwrite...)...)}
}

func (_c *EphemeralStorageMock_Save_Call) Run(run func(key string, value []byte, overwrite ...bool)) *EphemeralStorageMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bool, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(bool)
			}
		}
		run(args[0].(string), args[1].([]byte), variadicArgs...)
	})
	return _c
}

func (_c *EphemeralStorageMock_Save_Call) Return(_a0 error) *EphemeralStorageMock_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EphemeralStorageMock_Save_Call) RunAndReturn(run func(string, []byte, ...bool) error) *EphemeralStorageMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewEphemeralStorageMock creates a new instance of EphemeralStorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEphemeralStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EphemeralStorageMock {
	mock := &EphemeralStorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
