// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	prediction "github.com/konstellation-io/kai-sdk/go-sdk/sdk/prediction"
	mock "github.com/stretchr/testify/mock"
)

// PredictionsMock is an autogenerated mock type for the predictions type
type PredictionsMock struct {
	mock.Mock
}

type PredictionsMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PredictionsMock) EXPECT() *PredictionsMock_Expecter {
	return &PredictionsMock_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, predictionID
func (_m *PredictionsMock) Delete(ctx context.Context, predictionID string) error {
	ret := _m.Called(ctx, predictionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, predictionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PredictionsMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PredictionsMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - predictionID string
func (_e *PredictionsMock_Expecter) Delete(ctx interface{}, predictionID interface{}) *PredictionsMock_Delete_Call {
	return &PredictionsMock_Delete_Call{Call: _e.mock.On("Delete", ctx, predictionID)}
}

func (_c *PredictionsMock_Delete_Call) Run(run func(ctx context.Context, predictionID string)) *PredictionsMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PredictionsMock_Delete_Call) Return(_a0 error) *PredictionsMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PredictionsMock_Delete_Call) RunAndReturn(run func(context.Context, string) error) *PredictionsMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter
func (_m *PredictionsMock) Find(ctx context.Context, filter *prediction.Filter) ([]prediction.Prediction, error) {
	ret := _m.Called(ctx, filter)

	var r0 []prediction.Prediction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *prediction.Filter) ([]prediction.Prediction, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *prediction.Filter) []prediction.Prediction); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prediction.Prediction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *prediction.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PredictionsMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type PredictionsMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *prediction.Filter
func (_e *PredictionsMock_Expecter) Find(ctx interface{}, filter interface{}) *PredictionsMock_Find_Call {
	return &PredictionsMock_Find_Call{Call: _e.mock.On("Find", ctx, filter)}
}

func (_c *PredictionsMock_Find_Call) Run(run func(ctx context.Context, filter *prediction.Filter)) *PredictionsMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*prediction.Filter))
	})
	return _c
}

func (_c *PredictionsMock_Find_Call) Return(_a0 []prediction.Prediction, _a1 error) *PredictionsMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PredictionsMock_Find_Call) RunAndReturn(run func(context.Context, *prediction.Filter) ([]prediction.Prediction, error)) *PredictionsMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, predictionID
func (_m *PredictionsMock) Get(ctx context.Context, predictionID string) (*prediction.Prediction, error) {
	ret := _m.Called(ctx, predictionID)

	var r0 *prediction.Prediction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*prediction.Prediction, error)); ok {
		return rf(ctx, predictionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *prediction.Prediction); ok {
		r0 = rf(ctx, predictionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prediction.Prediction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, predictionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PredictionsMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PredictionsMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - predictionID string
func (_e *PredictionsMock_Expecter) Get(ctx interface{}, predictionID interface{}) *PredictionsMock_Get_Call {
	return &PredictionsMock_Get_Call{Call: _e.mock.On("Get", ctx, predictionID)}
}

func (_c *PredictionsMock_Get_Call) Run(run func(ctx context.Context, predictionID string)) *PredictionsMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PredictionsMock_Get_Call) Return(_a0 *prediction.Prediction, _a1 error) *PredictionsMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PredictionsMock_Get_Call) RunAndReturn(run func(context.Context, string) (*prediction.Prediction, error)) *PredictionsMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, predictionID, payload
func (_m *PredictionsMock) Save(ctx context.Context, predictionID string, payload prediction.Payload) error {
	ret := _m.Called(ctx, predictionID, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, prediction.Payload) error); ok {
		r0 = rf(ctx, predictionID, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PredictionsMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type PredictionsMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - predictionID string
//   - payload prediction.Payload
func (_e *PredictionsMock_Expecter) Save(ctx interface{}, predictionID interface{}, payload interface{}) *PredictionsMock_Save_Call {
	return &PredictionsMock_Save_Call{Call: _e.mock.On("Save", ctx, predictionID, payload)}
}

func (_c *PredictionsMock_Save_Call) Run(run func(ctx context.Context, predictionID string, payload prediction.Payload)) *PredictionsMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(prediction.Payload))
	})
	return _c
}

func (_c *PredictionsMock_Save_Call) Return(_a0 error) *PredictionsMock_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PredictionsMock_Save_Call) RunAndReturn(run func(context.Context, string, prediction.Payload) error) *PredictionsMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, predictionID, updatePayload
func (_m *PredictionsMock) Update(ctx context.Context, predictionID string, updatePayload prediction.UpdatePayloadFunc) error {
	ret := _m.Called(ctx, predictionID, updatePayload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, prediction.UpdatePayloadFunc) error); ok {
		r0 = rf(ctx, predictionID, updatePayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PredictionsMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PredictionsMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - predictionID string
//   - updatePayload prediction.UpdatePayloadFunc
func (_e *PredictionsMock_Expecter) Update(ctx interface{}, predictionID interface{}, updatePayload interface{}) *PredictionsMock_Update_Call {
	return &PredictionsMock_Update_Call{Call: _e.mock.On("Update", ctx, predictionID, updatePayload)}
}

func (_c *PredictionsMock_Update_Call) Run(run func(ctx context.Context, predictionID string, updatePayload prediction.UpdatePayloadFunc)) *PredictionsMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(prediction.UpdatePayloadFunc))
	})
	return _c
}

func (_c *PredictionsMock_Update_Call) Return(_a0 error) *PredictionsMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PredictionsMock_Update_Call) RunAndReturn(run func(context.Context, string, prediction.UpdatePayloadFunc) error) *PredictionsMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewPredictionsMock creates a new instance of PredictionsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPredictionsMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PredictionsMock {
	mock := &PredictionsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
