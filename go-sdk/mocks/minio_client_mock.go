// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	minio "github.com/minio/minio-go/v7"

	mock "github.com/stretchr/testify/mock"
)

// MinioClientMock is an autogenerated mock type for the persistentStorageInterface type
type MinioClientMock struct {
	mock.Mock
}

type MinioClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MinioClientMock) EXPECT() *MinioClientMock_Expecter {
	return &MinioClientMock_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClientMock) GetObject(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	var r0 *minio.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (*minio.Object, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) *minio.Object); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinioClientMock_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MinioClientMock_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.GetObjectOptions
func (_e *MinioClientMock_Expecter) GetObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MinioClientMock_GetObject_Call {
	return &MinioClientMock_GetObject_Call{Call: _e.mock.On("GetObject", ctx, bucketName, objectName, opts)}
}

func (_c *MinioClientMock_GetObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions)) *MinioClientMock_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.GetObjectOptions))
	})
	return _c
}

func (_c *MinioClientMock_GetObject_Call) Return(_a0 *minio.Object, _a1 error) *MinioClientMock_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinioClientMock_GetObject_Call) RunAndReturn(run func(context.Context, string, string, minio.GetObjectOptions) (*minio.Object, error)) *MinioClientMock_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function with given fields: ctx, bucketName, opts
func (_m *MinioClientMock) ListObjects(ctx context.Context, bucketName string, opts minio.ListObjectsOptions) <-chan minio.ObjectInfo {
	ret := _m.Called(ctx, bucketName, opts)

	var r0 <-chan minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, minio.ListObjectsOptions) <-chan minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan minio.ObjectInfo)
		}
	}

	return r0
}

// MinioClientMock_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type MinioClientMock_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - opts minio.ListObjectsOptions
func (_e *MinioClientMock_Expecter) ListObjects(ctx interface{}, bucketName interface{}, opts interface{}) *MinioClientMock_ListObjects_Call {
	return &MinioClientMock_ListObjects_Call{Call: _e.mock.On("ListObjects", ctx, bucketName, opts)}
}

func (_c *MinioClientMock_ListObjects_Call) Run(run func(ctx context.Context, bucketName string, opts minio.ListObjectsOptions)) *MinioClientMock_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(minio.ListObjectsOptions))
	})
	return _c
}

func (_c *MinioClientMock_ListObjects_Call) Return(_a0 <-chan minio.ObjectInfo) *MinioClientMock_ListObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MinioClientMock_ListObjects_Call) RunAndReturn(run func(context.Context, string, minio.ListObjectsOptions) <-chan minio.ObjectInfo) *MinioClientMock_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize, opts
func (_m *MinioClientMock) PutObject(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize, opts)

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucketName, objectName, reader, objectSize, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) minio.UploadInfo); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinioClientMock_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MinioClientMock_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
//   - opts minio.PutObjectOptions
func (_e *MinioClientMock_Expecter) PutObject(ctx interface{}, bucketName interface{}, objectName interface{}, reader interface{}, objectSize interface{}, opts interface{}) *MinioClientMock_PutObject_Call {
	return &MinioClientMock_PutObject_Call{Call: _e.mock.On("PutObject", ctx, bucketName, objectName, reader, objectSize, opts)}
}

func (_c *MinioClientMock_PutObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions)) *MinioClientMock_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64), args[5].(minio.PutObjectOptions))
	})
	return _c
}

func (_c *MinioClientMock_PutObject_Call) Return(_a0 minio.UploadInfo, _a1 error) *MinioClientMock_PutObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinioClientMock_PutObject_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)) *MinioClientMock_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClientMock) RemoveObject(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions) error {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.RemoveObjectOptions) error); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MinioClientMock_RemoveObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveObject'
type MinioClientMock_RemoveObject_Call struct {
	*mock.Call
}

// RemoveObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.RemoveObjectOptions
func (_e *MinioClientMock_Expecter) RemoveObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MinioClientMock_RemoveObject_Call {
	return &MinioClientMock_RemoveObject_Call{Call: _e.mock.On("RemoveObject", ctx, bucketName, objectName, opts)}
}

func (_c *MinioClientMock_RemoveObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions)) *MinioClientMock_RemoveObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.RemoveObjectOptions))
	})
	return _c
}

func (_c *MinioClientMock_RemoveObject_Call) Return(_a0 error) *MinioClientMock_RemoveObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MinioClientMock_RemoveObject_Call) RunAndReturn(run func(context.Context, string, string, minio.RemoveObjectOptions) error) *MinioClientMock_RemoveObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMinioClientMock creates a new instance of MinioClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMinioClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MinioClientMock {
	mock := &MinioClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
