// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// KeyValueMock is an autogenerated mock type for the KeyValue type
type KeyValueMock struct {
	mock.Mock
}

type KeyValueMock_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyValueMock) EXPECT() *KeyValueMock_Expecter {
	return &KeyValueMock_Expecter{mock: &_m.Mock}
}

// Bucket provides a mock function with given fields:
func (_m *KeyValueMock) Bucket() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeyValueMock_Bucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bucket'
type KeyValueMock_Bucket_Call struct {
	*mock.Call
}

// Bucket is a helper method to define mock.On call
func (_e *KeyValueMock_Expecter) Bucket() *KeyValueMock_Bucket_Call {
	return &KeyValueMock_Bucket_Call{Call: _e.mock.On("Bucket")}
}

func (_c *KeyValueMock_Bucket_Call) Run(run func()) *KeyValueMock_Bucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueMock_Bucket_Call) Return(_a0 string) *KeyValueMock_Bucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueMock_Bucket_Call) RunAndReturn(run func() string) *KeyValueMock_Bucket_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: key, value
func (_m *KeyValueMock) Create(key string, value []byte) (uint64, error) {
	ret := _m.Called(key, value)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (uint64, error)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) uint64); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type KeyValueMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - key string
//   - value []byte
func (_e *KeyValueMock_Expecter) Create(key interface{}, value interface{}) *KeyValueMock_Create_Call {
	return &KeyValueMock_Create_Call{Call: _e.mock.On("Create", key, value)}
}

func (_c *KeyValueMock_Create_Call) Run(run func(key string, value []byte)) *KeyValueMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *KeyValueMock_Create_Call) Return(revision uint64, err error) *KeyValueMock_Create_Call {
	_c.Call.Return(revision, err)
	return _c
}

func (_c *KeyValueMock_Create_Call) RunAndReturn(run func(string, []byte) (uint64, error)) *KeyValueMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key, opts
func (_m *KeyValueMock) Delete(key string, opts ...nats.DeleteOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...nats.DeleteOpt) error); ok {
		r0 = rf(key, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyValueMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type KeyValueMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
//   - opts ...nats.DeleteOpt
func (_e *KeyValueMock_Expecter) Delete(key interface{}, opts ...interface{}) *KeyValueMock_Delete_Call {
	return &KeyValueMock_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{key}, opts...)...)}
}

func (_c *KeyValueMock_Delete_Call) Run(run func(key string, opts ...nats.DeleteOpt)) *KeyValueMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nats.DeleteOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(nats.DeleteOpt)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *KeyValueMock_Delete_Call) Return(_a0 error) *KeyValueMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueMock_Delete_Call) RunAndReturn(run func(string, ...nats.DeleteOpt) error) *KeyValueMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *KeyValueMock) Get(key string) (nats.KeyValueEntry, error) {
	ret := _m.Called(key)

	var r0 nats.KeyValueEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (nats.KeyValueEntry, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) nats.KeyValueEntry); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.KeyValueEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type KeyValueMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *KeyValueMock_Expecter) Get(key interface{}) *KeyValueMock_Get_Call {
	return &KeyValueMock_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *KeyValueMock_Get_Call) Run(run func(key string)) *KeyValueMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *KeyValueMock_Get_Call) Return(entry nats.KeyValueEntry, err error) *KeyValueMock_Get_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *KeyValueMock_Get_Call) RunAndReturn(run func(string) (nats.KeyValueEntry, error)) *KeyValueMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetRevision provides a mock function with given fields: key, revision
func (_m *KeyValueMock) GetRevision(key string, revision uint64) (nats.KeyValueEntry, error) {
	ret := _m.Called(key, revision)

	var r0 nats.KeyValueEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint64) (nats.KeyValueEntry, error)); ok {
		return rf(key, revision)
	}
	if rf, ok := ret.Get(0).(func(string, uint64) nats.KeyValueEntry); ok {
		r0 = rf(key, revision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.KeyValueEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(key, revision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_GetRevision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRevision'
type KeyValueMock_GetRevision_Call struct {
	*mock.Call
}

// GetRevision is a helper method to define mock.On call
//   - key string
//   - revision uint64
func (_e *KeyValueMock_Expecter) GetRevision(key interface{}, revision interface{}) *KeyValueMock_GetRevision_Call {
	return &KeyValueMock_GetRevision_Call{Call: _e.mock.On("GetRevision", key, revision)}
}

func (_c *KeyValueMock_GetRevision_Call) Run(run func(key string, revision uint64)) *KeyValueMock_GetRevision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint64))
	})
	return _c
}

func (_c *KeyValueMock_GetRevision_Call) Return(entry nats.KeyValueEntry, err error) *KeyValueMock_GetRevision_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *KeyValueMock_GetRevision_Call) RunAndReturn(run func(string, uint64) (nats.KeyValueEntry, error)) *KeyValueMock_GetRevision_Call {
	_c.Call.Return(run)
	return _c
}

// History provides a mock function with given fields: key, opts
func (_m *KeyValueMock) History(key string, opts ...nats.WatchOpt) ([]nats.KeyValueEntry, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []nats.KeyValueEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...nats.WatchOpt) ([]nats.KeyValueEntry, error)); ok {
		return rf(key, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...nats.WatchOpt) []nats.KeyValueEntry); ok {
		r0 = rf(key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nats.KeyValueEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...nats.WatchOpt) error); ok {
		r1 = rf(key, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_History_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'History'
type KeyValueMock_History_Call struct {
	*mock.Call
}

// History is a helper method to define mock.On call
//   - key string
//   - opts ...nats.WatchOpt
func (_e *KeyValueMock_Expecter) History(key interface{}, opts ...interface{}) *KeyValueMock_History_Call {
	return &KeyValueMock_History_Call{Call: _e.mock.On("History",
		append([]interface{}{key}, opts...)...)}
}

func (_c *KeyValueMock_History_Call) Run(run func(key string, opts ...nats.WatchOpt)) *KeyValueMock_History_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nats.WatchOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(nats.WatchOpt)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *KeyValueMock_History_Call) Return(_a0 []nats.KeyValueEntry, _a1 error) *KeyValueMock_History_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyValueMock_History_Call) RunAndReturn(run func(string, ...nats.WatchOpt) ([]nats.KeyValueEntry, error)) *KeyValueMock_History_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with given fields: opts
func (_m *KeyValueMock) Keys(opts ...nats.WatchOpt) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(...nats.WatchOpt) ([]string, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...nats.WatchOpt) []string); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(...nats.WatchOpt) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type KeyValueMock_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
//   - opts ...nats.WatchOpt
func (_e *KeyValueMock_Expecter) Keys(opts ...interface{}) *KeyValueMock_Keys_Call {
	return &KeyValueMock_Keys_Call{Call: _e.mock.On("Keys",
		append([]interface{}{}, opts...)...)}
}

func (_c *KeyValueMock_Keys_Call) Run(run func(opts ...nats.WatchOpt)) *KeyValueMock_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nats.WatchOpt, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(nats.WatchOpt)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *KeyValueMock_Keys_Call) Return(_a0 []string, _a1 error) *KeyValueMock_Keys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyValueMock_Keys_Call) RunAndReturn(run func(...nats.WatchOpt) ([]string, error)) *KeyValueMock_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// Purge provides a mock function with given fields: key, opts
func (_m *KeyValueMock) Purge(key string, opts ...nats.DeleteOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...nats.DeleteOpt) error); ok {
		r0 = rf(key, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyValueMock_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type KeyValueMock_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - key string
//   - opts ...nats.DeleteOpt
func (_e *KeyValueMock_Expecter) Purge(key interface{}, opts ...interface{}) *KeyValueMock_Purge_Call {
	return &KeyValueMock_Purge_Call{Call: _e.mock.On("Purge",
		append([]interface{}{key}, opts...)...)}
}

func (_c *KeyValueMock_Purge_Call) Run(run func(key string, opts ...nats.DeleteOpt)) *KeyValueMock_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nats.DeleteOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(nats.DeleteOpt)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *KeyValueMock_Purge_Call) Return(_a0 error) *KeyValueMock_Purge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueMock_Purge_Call) RunAndReturn(run func(string, ...nats.DeleteOpt) error) *KeyValueMock_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeDeletes provides a mock function with given fields: opts
func (_m *KeyValueMock) PurgeDeletes(opts ...nats.PurgeOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...nats.PurgeOpt) error); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyValueMock_PurgeDeletes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeDeletes'
type KeyValueMock_PurgeDeletes_Call struct {
	*mock.Call
}

// PurgeDeletes is a helper method to define mock.On call
//   - opts ...nats.PurgeOpt
func (_e *KeyValueMock_Expecter) PurgeDeletes(opts ...interface{}) *KeyValueMock_PurgeDeletes_Call {
	return &KeyValueMock_PurgeDeletes_Call{Call: _e.mock.On("PurgeDeletes",
		append([]interface{}{}, opts...)...)}
}

func (_c *KeyValueMock_PurgeDeletes_Call) Run(run func(opts ...nats.PurgeOpt)) *KeyValueMock_PurgeDeletes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nats.PurgeOpt, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(nats.PurgeOpt)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *KeyValueMock_PurgeDeletes_Call) Return(_a0 error) *KeyValueMock_PurgeDeletes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueMock_PurgeDeletes_Call) RunAndReturn(run func(...nats.PurgeOpt) error) *KeyValueMock_PurgeDeletes_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: key, value
func (_m *KeyValueMock) Put(key string, value []byte) (uint64, error) {
	ret := _m.Called(key, value)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (uint64, error)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) uint64); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type KeyValueMock_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key string
//   - value []byte
func (_e *KeyValueMock_Expecter) Put(key interface{}, value interface{}) *KeyValueMock_Put_Call {
	return &KeyValueMock_Put_Call{Call: _e.mock.On("Put", key, value)}
}

func (_c *KeyValueMock_Put_Call) Run(run func(key string, value []byte)) *KeyValueMock_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *KeyValueMock_Put_Call) Return(revision uint64, err error) *KeyValueMock_Put_Call {
	_c.Call.Return(revision, err)
	return _c
}

func (_c *KeyValueMock_Put_Call) RunAndReturn(run func(string, []byte) (uint64, error)) *KeyValueMock_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutString provides a mock function with given fields: key, value
func (_m *KeyValueMock) PutString(key string, value string) (uint64, error) {
	ret := _m.Called(key, value)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (uint64, error)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, string) uint64); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_PutString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutString'
type KeyValueMock_PutString_Call struct {
	*mock.Call
}

// PutString is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *KeyValueMock_Expecter) PutString(key interface{}, value interface{}) *KeyValueMock_PutString_Call {
	return &KeyValueMock_PutString_Call{Call: _e.mock.On("PutString", key, value)}
}

func (_c *KeyValueMock_PutString_Call) Run(run func(key string, value string)) *KeyValueMock_PutString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *KeyValueMock_PutString_Call) Return(revision uint64, err error) *KeyValueMock_PutString_Call {
	_c.Call.Return(revision, err)
	return _c
}

func (_c *KeyValueMock_PutString_Call) RunAndReturn(run func(string, string) (uint64, error)) *KeyValueMock_PutString_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *KeyValueMock) Status() (nats.KeyValueStatus, error) {
	ret := _m.Called()

	var r0 nats.KeyValueStatus
	var r1 error
	if rf, ok := ret.Get(0).(func() (nats.KeyValueStatus, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() nats.KeyValueStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.KeyValueStatus)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type KeyValueMock_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *KeyValueMock_Expecter) Status() *KeyValueMock_Status_Call {
	return &KeyValueMock_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *KeyValueMock_Status_Call) Run(run func()) *KeyValueMock_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueMock_Status_Call) Return(_a0 nats.KeyValueStatus, _a1 error) *KeyValueMock_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyValueMock_Status_Call) RunAndReturn(run func() (nats.KeyValueStatus, error)) *KeyValueMock_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: key, value, last
func (_m *KeyValueMock) Update(key string, value []byte, last uint64) (uint64, error) {
	ret := _m.Called(key, value, last)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte, uint64) (uint64, error)); ok {
		return rf(key, value, last)
	}
	if rf, ok := ret.Get(0).(func(string, []byte, uint64) uint64); ok {
		r0 = rf(key, value, last)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string, []byte, uint64) error); ok {
		r1 = rf(key, value, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type KeyValueMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - last uint64
func (_e *KeyValueMock_Expecter) Update(key interface{}, value interface{}, last interface{}) *KeyValueMock_Update_Call {
	return &KeyValueMock_Update_Call{Call: _e.mock.On("Update", key, value, last)}
}

func (_c *KeyValueMock_Update_Call) Run(run func(key string, value []byte, last uint64)) *KeyValueMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(uint64))
	})
	return _c
}

func (_c *KeyValueMock_Update_Call) Return(revision uint64, err error) *KeyValueMock_Update_Call {
	_c.Call.Return(revision, err)
	return _c
}

func (_c *KeyValueMock_Update_Call) RunAndReturn(run func(string, []byte, uint64) (uint64, error)) *KeyValueMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: keys, opts
func (_m *KeyValueMock) Watch(keys string, opts ...nats.WatchOpt) (nats.KeyWatcher, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, keys)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 nats.KeyWatcher
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...nats.WatchOpt) (nats.KeyWatcher, error)); ok {
		return rf(keys, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, ...nats.WatchOpt) nats.KeyWatcher); ok {
		r0 = rf(keys, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.KeyWatcher)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...nats.WatchOpt) error); ok {
		r1 = rf(keys, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type KeyValueMock_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - keys string
//   - opts ...nats.WatchOpt
func (_e *KeyValueMock_Expecter) Watch(keys interface{}, opts ...interface{}) *KeyValueMock_Watch_Call {
	return &KeyValueMock_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{keys}, opts...)...)}
}

func (_c *KeyValueMock_Watch_Call) Run(run func(keys string, opts ...nats.WatchOpt)) *KeyValueMock_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nats.WatchOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(nats.WatchOpt)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *KeyValueMock_Watch_Call) Return(_a0 nats.KeyWatcher, _a1 error) *KeyValueMock_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyValueMock_Watch_Call) RunAndReturn(run func(string, ...nats.WatchOpt) (nats.KeyWatcher, error)) *KeyValueMock_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// WatchAll provides a mock function with given fields: opts
func (_m *KeyValueMock) WatchAll(opts ...nats.WatchOpt) (nats.KeyWatcher, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 nats.KeyWatcher
	var r1 error
	if rf, ok := ret.Get(0).(func(...nats.WatchOpt) (nats.KeyWatcher, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...nats.WatchOpt) nats.KeyWatcher); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.KeyWatcher)
		}
	}

	if rf, ok := ret.Get(1).(func(...nats.WatchOpt) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyValueMock_WatchAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchAll'
type KeyValueMock_WatchAll_Call struct {
	*mock.Call
}

// WatchAll is a helper method to define mock.On call
//   - opts ...nats.WatchOpt
func (_e *KeyValueMock_Expecter) WatchAll(opts ...interface{}) *KeyValueMock_WatchAll_Call {
	return &KeyValueMock_WatchAll_Call{Call: _e.mock.On("WatchAll",
		append([]interface{}{}, opts...)...)}
}

func (_c *KeyValueMock_WatchAll_Call) Run(run func(opts ...nats.WatchOpt)) *KeyValueMock_WatchAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nats.WatchOpt, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(nats.WatchOpt)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *KeyValueMock_WatchAll_Call) Return(_a0 nats.KeyWatcher, _a1 error) *KeyValueMock_WatchAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyValueMock_WatchAll_Call) RunAndReturn(run func(...nats.WatchOpt) (nats.KeyWatcher, error)) *KeyValueMock_WatchAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeyValueMock creates a new instance of KeyValueMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyValueMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyValueMock {
	mock := &KeyValueMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
