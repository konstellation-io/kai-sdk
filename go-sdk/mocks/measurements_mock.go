// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	metric "go.opentelemetry.io/otel/metric"
)

// MeasurementsMock is an autogenerated mock type for the measurements type
type MeasurementsMock struct {
	mock.Mock
}

type MeasurementsMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MeasurementsMock) EXPECT() *MeasurementsMock_Expecter {
	return &MeasurementsMock_Expecter{mock: &_m.Mock}
}

// GetMetricsClient provides a mock function with given fields:
func (_m *MeasurementsMock) GetMetricsClient() metric.Meter {
	ret := _m.Called()

	var r0 metric.Meter
	if rf, ok := ret.Get(0).(func() metric.Meter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metric.Meter)
		}
	}

	return r0
}

// MeasurementsMock_GetMetricsClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsClient'
type MeasurementsMock_GetMetricsClient_Call struct {
	*mock.Call
}

// GetMetricsClient is a helper method to define mock.On call
func (_e *MeasurementsMock_Expecter) GetMetricsClient() *MeasurementsMock_GetMetricsClient_Call {
	return &MeasurementsMock_GetMetricsClient_Call{Call: _e.mock.On("GetMetricsClient")}
}

func (_c *MeasurementsMock_GetMetricsClient_Call) Run(run func()) *MeasurementsMock_GetMetricsClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MeasurementsMock_GetMetricsClient_Call) Return(_a0 metric.Meter) *MeasurementsMock_GetMetricsClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MeasurementsMock_GetMetricsClient_Call) RunAndReturn(run func() metric.Meter) *MeasurementsMock_GetMetricsClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMeasurementsMock creates a new instance of MeasurementsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMeasurementsMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MeasurementsMock {
	mock := &MeasurementsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
