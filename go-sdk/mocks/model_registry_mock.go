// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	modelregistry "github.com/konstellation-io/kai-sdk/go-sdk/sdk/model-registry"
	mock "github.com/stretchr/testify/mock"
)

// ModelRegistryMock is an autogenerated mock type for the modelRegistry type
type ModelRegistryMock struct {
	mock.Mock
}

type ModelRegistryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ModelRegistryMock) EXPECT() *ModelRegistryMock_Expecter {
	return &ModelRegistryMock_Expecter{mock: &_m.Mock}
}

// DeleteModel provides a mock function with given fields: name
func (_m *ModelRegistryMock) DeleteModel(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModelRegistryMock_DeleteModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteModel'
type ModelRegistryMock_DeleteModel_Call struct {
	*mock.Call
}

// DeleteModel is a helper method to define mock.On call
//   - name string
func (_e *ModelRegistryMock_Expecter) DeleteModel(name interface{}) *ModelRegistryMock_DeleteModel_Call {
	return &ModelRegistryMock_DeleteModel_Call{Call: _e.mock.On("DeleteModel", name)}
}

func (_c *ModelRegistryMock_DeleteModel_Call) Run(run func(name string)) *ModelRegistryMock_DeleteModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ModelRegistryMock_DeleteModel_Call) Return(_a0 error) *ModelRegistryMock_DeleteModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModelRegistryMock_DeleteModel_Call) RunAndReturn(run func(string) error) *ModelRegistryMock_DeleteModel_Call {
	_c.Call.Return(run)
	return _c
}

// GetModel provides a mock function with given fields: name, version
func (_m *ModelRegistryMock) GetModel(name string, version ...string) (*modelregistry.Model, error) {
	_va := make([]interface{}, len(version))
	for _i := range version {
		_va[_i] = version[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *modelregistry.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (*modelregistry.Model, error)); ok {
		return rf(name, version...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) *modelregistry.Model); ok {
		r0 = rf(name, version...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelregistry.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(name, version...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelRegistryMock_GetModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModel'
type ModelRegistryMock_GetModel_Call struct {
	*mock.Call
}

// GetModel is a helper method to define mock.On call
//   - name string
//   - version ...string
func (_e *ModelRegistryMock_Expecter) GetModel(name interface{}, version ...interface{}) *ModelRegistryMock_GetModel_Call {
	return &ModelRegistryMock_GetModel_Call{Call: _e.mock.On("GetModel",
		append([]interface{}{name}, version...)...)}
}

func (_c *ModelRegistryMock_GetModel_Call) Run(run func(name string, version ...string)) *ModelRegistryMock_GetModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ModelRegistryMock_GetModel_Call) Return(_a0 *modelregistry.Model, _a1 error) *ModelRegistryMock_GetModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ModelRegistryMock_GetModel_Call) RunAndReturn(run func(string, ...string) (*modelregistry.Model, error)) *ModelRegistryMock_GetModel_Call {
	_c.Call.Return(run)
	return _c
}

// ListModelVersions provides a mock function with given fields: name
func (_m *ModelRegistryMock) ListModelVersions(name string) ([]*modelregistry.ModelInfo, error) {
	ret := _m.Called(name)

	var r0 []*modelregistry.ModelInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*modelregistry.ModelInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []*modelregistry.ModelInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modelregistry.ModelInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelRegistryMock_ListModelVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModelVersions'
type ModelRegistryMock_ListModelVersions_Call struct {
	*mock.Call
}

// ListModelVersions is a helper method to define mock.On call
//   - name string
func (_e *ModelRegistryMock_Expecter) ListModelVersions(name interface{}) *ModelRegistryMock_ListModelVersions_Call {
	return &ModelRegistryMock_ListModelVersions_Call{Call: _e.mock.On("ListModelVersions", name)}
}

func (_c *ModelRegistryMock_ListModelVersions_Call) Run(run func(name string)) *ModelRegistryMock_ListModelVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ModelRegistryMock_ListModelVersions_Call) Return(_a0 []*modelregistry.ModelInfo, _a1 error) *ModelRegistryMock_ListModelVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ModelRegistryMock_ListModelVersions_Call) RunAndReturn(run func(string) ([]*modelregistry.ModelInfo, error)) *ModelRegistryMock_ListModelVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListModels provides a mock function with given fields:
func (_m *ModelRegistryMock) ListModels() ([]*modelregistry.ModelInfo, error) {
	ret := _m.Called()

	var r0 []*modelregistry.ModelInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*modelregistry.ModelInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*modelregistry.ModelInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modelregistry.ModelInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelRegistryMock_ListModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModels'
type ModelRegistryMock_ListModels_Call struct {
	*mock.Call
}

// ListModels is a helper method to define mock.On call
func (_e *ModelRegistryMock_Expecter) ListModels() *ModelRegistryMock_ListModels_Call {
	return &ModelRegistryMock_ListModels_Call{Call: _e.mock.On("ListModels")}
}

func (_c *ModelRegistryMock_ListModels_Call) Run(run func()) *ModelRegistryMock_ListModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModelRegistryMock_ListModels_Call) Return(_a0 []*modelregistry.ModelInfo, _a1 error) *ModelRegistryMock_ListModels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ModelRegistryMock_ListModels_Call) RunAndReturn(run func() ([]*modelregistry.ModelInfo, error)) *ModelRegistryMock_ListModels_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterModel provides a mock function with given fields: model, name, version, modelFormat, description
func (_m *ModelRegistryMock) RegisterModel(model []byte, name string, version string, modelFormat string, description ...string) error {
	_va := make([]interface{}, len(description))
	for _i := range description {
		_va[_i] = description[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, model, name, version, modelFormat)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, string, string, ...string) error); ok {
		r0 = rf(model, name, version, modelFormat, description...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModelRegistryMock_RegisterModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterModel'
type ModelRegistryMock_RegisterModel_Call struct {
	*mock.Call
}

// RegisterModel is a helper method to define mock.On call
//   - model []byte
//   - name string
//   - version string
//   - modelFormat string
//   - description ...string
func (_e *ModelRegistryMock_Expecter) RegisterModel(model interface{}, name interface{}, version interface{}, modelFormat interface{}, description ...interface{}) *ModelRegistryMock_RegisterModel_Call {
	return &ModelRegistryMock_RegisterModel_Call{Call: _e.mock.On("RegisterModel",
		append([]interface{}{model, name, version, modelFormat}, description...)...)}
}

func (_c *ModelRegistryMock_RegisterModel_Call) Run(run func(model []byte, name string, version string, modelFormat string, description ...string)) *ModelRegistryMock_RegisterModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].([]byte), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *ModelRegistryMock_RegisterModel_Call) Return(_a0 error) *ModelRegistryMock_RegisterModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModelRegistryMock_RegisterModel_Call) RunAndReturn(run func([]byte, string, string, string, ...string) error) *ModelRegistryMock_RegisterModel_Call {
	_c.Call.Return(run)
	return _c
}

// NewModelRegistryMock creates a new instance of ModelRegistryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModelRegistryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModelRegistryMock {
	mock := &ModelRegistryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
