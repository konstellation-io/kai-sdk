// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// KeyValueEntryMock is an autogenerated mock type for the KeyValueEntry type
type KeyValueEntryMock struct {
	mock.Mock
}

type KeyValueEntryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyValueEntryMock) EXPECT() *KeyValueEntryMock_Expecter {
	return &KeyValueEntryMock_Expecter{mock: &_m.Mock}
}

// Bucket provides a mock function with given fields:
func (_m *KeyValueEntryMock) Bucket() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeyValueEntryMock_Bucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bucket'
type KeyValueEntryMock_Bucket_Call struct {
	*mock.Call
}

// Bucket is a helper method to define mock.On call
func (_e *KeyValueEntryMock_Expecter) Bucket() *KeyValueEntryMock_Bucket_Call {
	return &KeyValueEntryMock_Bucket_Call{Call: _e.mock.On("Bucket")}
}

func (_c *KeyValueEntryMock_Bucket_Call) Run(run func()) *KeyValueEntryMock_Bucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueEntryMock_Bucket_Call) Return(_a0 string) *KeyValueEntryMock_Bucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueEntryMock_Bucket_Call) RunAndReturn(run func() string) *KeyValueEntryMock_Bucket_Call {
	_c.Call.Return(run)
	return _c
}

// Created provides a mock function with given fields:
func (_m *KeyValueEntryMock) Created() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// KeyValueEntryMock_Created_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Created'
type KeyValueEntryMock_Created_Call struct {
	*mock.Call
}

// Created is a helper method to define mock.On call
func (_e *KeyValueEntryMock_Expecter) Created() *KeyValueEntryMock_Created_Call {
	return &KeyValueEntryMock_Created_Call{Call: _e.mock.On("Created")}
}

func (_c *KeyValueEntryMock_Created_Call) Run(run func()) *KeyValueEntryMock_Created_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueEntryMock_Created_Call) Return(_a0 time.Time) *KeyValueEntryMock_Created_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueEntryMock_Created_Call) RunAndReturn(run func() time.Time) *KeyValueEntryMock_Created_Call {
	_c.Call.Return(run)
	return _c
}

// Delta provides a mock function with given fields:
func (_m *KeyValueEntryMock) Delta() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// KeyValueEntryMock_Delta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delta'
type KeyValueEntryMock_Delta_Call struct {
	*mock.Call
}

// Delta is a helper method to define mock.On call
func (_e *KeyValueEntryMock_Expecter) Delta() *KeyValueEntryMock_Delta_Call {
	return &KeyValueEntryMock_Delta_Call{Call: _e.mock.On("Delta")}
}

func (_c *KeyValueEntryMock_Delta_Call) Run(run func()) *KeyValueEntryMock_Delta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueEntryMock_Delta_Call) Return(_a0 uint64) *KeyValueEntryMock_Delta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueEntryMock_Delta_Call) RunAndReturn(run func() uint64) *KeyValueEntryMock_Delta_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function with given fields:
func (_m *KeyValueEntryMock) Key() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeyValueEntryMock_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type KeyValueEntryMock_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *KeyValueEntryMock_Expecter) Key() *KeyValueEntryMock_Key_Call {
	return &KeyValueEntryMock_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *KeyValueEntryMock_Key_Call) Run(run func()) *KeyValueEntryMock_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueEntryMock_Key_Call) Return(_a0 string) *KeyValueEntryMock_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueEntryMock_Key_Call) RunAndReturn(run func() string) *KeyValueEntryMock_Key_Call {
	_c.Call.Return(run)
	return _c
}

// Operation provides a mock function with given fields:
func (_m *KeyValueEntryMock) Operation() nats.KeyValueOp {
	ret := _m.Called()

	var r0 nats.KeyValueOp
	if rf, ok := ret.Get(0).(func() nats.KeyValueOp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(nats.KeyValueOp)
	}

	return r0
}

// KeyValueEntryMock_Operation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operation'
type KeyValueEntryMock_Operation_Call struct {
	*mock.Call
}

// Operation is a helper method to define mock.On call
func (_e *KeyValueEntryMock_Expecter) Operation() *KeyValueEntryMock_Operation_Call {
	return &KeyValueEntryMock_Operation_Call{Call: _e.mock.On("Operation")}
}

func (_c *KeyValueEntryMock_Operation_Call) Run(run func()) *KeyValueEntryMock_Operation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueEntryMock_Operation_Call) Return(_a0 nats.KeyValueOp) *KeyValueEntryMock_Operation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueEntryMock_Operation_Call) RunAndReturn(run func() nats.KeyValueOp) *KeyValueEntryMock_Operation_Call {
	_c.Call.Return(run)
	return _c
}

// Revision provides a mock function with given fields:
func (_m *KeyValueEntryMock) Revision() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// KeyValueEntryMock_Revision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revision'
type KeyValueEntryMock_Revision_Call struct {
	*mock.Call
}

// Revision is a helper method to define mock.On call
func (_e *KeyValueEntryMock_Expecter) Revision() *KeyValueEntryMock_Revision_Call {
	return &KeyValueEntryMock_Revision_Call{Call: _e.mock.On("Revision")}
}

func (_c *KeyValueEntryMock_Revision_Call) Run(run func()) *KeyValueEntryMock_Revision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueEntryMock_Revision_Call) Return(_a0 uint64) *KeyValueEntryMock_Revision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueEntryMock_Revision_Call) RunAndReturn(run func() uint64) *KeyValueEntryMock_Revision_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *KeyValueEntryMock) Value() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// KeyValueEntryMock_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type KeyValueEntryMock_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *KeyValueEntryMock_Expecter) Value() *KeyValueEntryMock_Value_Call {
	return &KeyValueEntryMock_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *KeyValueEntryMock_Value_Call) Run(run func()) *KeyValueEntryMock_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeyValueEntryMock_Value_Call) Return(_a0 []byte) *KeyValueEntryMock_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyValueEntryMock_Value_Call) RunAndReturn(run func() []byte) *KeyValueEntryMock_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeyValueEntryMock creates a new instance of KeyValueEntryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyValueEntryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyValueEntryMock {
	mock := &KeyValueEntryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
